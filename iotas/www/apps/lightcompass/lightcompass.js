function lightcompass() {
	
	console.log("function lightcompass()");
	
	this.appStart = appStart;
	this.appQuit = appQuit;
	this.startLightCompass = startLightCompass;
	this.deviceOrientationHandler = deviceOrientationHandler;
	this.rotation = null;
	this.updateTimer = null;
	//this.cca = cca;

	// Start App
	function appStart() {
		console.log("lightcompass.appStart");
		$("head").append('<link rel="stylesheet" href="lightcompass.css" />');
		startLightCompass();
	}
	
	// Quit App
	function appQuit() {
		console.log(theApp.cca);
		console.log("lightcompass.appQuit");
		window.clearInterval(theApp.updateTimer);		// And clear the timer
	}
	
	// We'll check the compass every 10th of a second
	// That is, if we can check it at all.
	function startLightCompass() {

		// Test for DeviceOrientationEvent
		if (window.DeviceOrientationEvent) {
		 console.log("DeviceOrientation is supported");
		} else {
			console.log("DeviceOrientation not supported");
			window.alert("LightCompass not supported.");
			return;
		}

		// Set up the something something here
		// Listen for the event and handle DeviceOrientationEvent object
  		window.addEventListener('deviceorientation', function(eventData) {
		    // gamma is the left-to-right tilt in degrees, where right is positive
		    var tiltLR = eventData.gamma;

		    // beta is the front-to-back tilt in degrees, where front is positive
		    var tiltFB = eventData.beta;

		    // alpha is the compass direction the device is facing in degrees
		    var dir = eventData.alpha

		    // call our orientation event handler
		    theApp.deviceOrientationHandler(tiltLR, tiltFB, dir);
		  }, false);

  		// And start an update timer at 5 hz to begin with
  		theApp.updateTimer = window.setInterval(lightCompassUpdate, 200);

	}

	// The DeviceOrientationEvents are sent here for processing
	// Ignore the left/right front/back events at the moment.
	function deviceOrientationHandler(lr, fb, dir) {
		console.log("deviceOrientationHandler", lr, fb, dir);
		if (dir != null) {
			theApp.rotation = Math.floor(dir);
			grees = theApp.rotation.toString();
		} else {
			var grees = 'null';
		}
		$('#degrees').text(grees);
	}
	
	function lightCompassUpdate() {
		console.log('lightCompassUpdate');

		var cca = [
			[ 0xff, 0x00, 0x00 ],
			[ 0xfb, 0x00, 0x04 ],
			[ 0xf7, 0x00, 0x08 ],
			[ 0xf3, 0x00, 0x0c ],
			[ 0xee, 0x00, 0x11 ],
			[ 0xea, 0x00, 0x15 ],
			[ 0xe6, 0x00, 0x19 ],
			[ 0xe2, 0x00, 0x1d ],
			[ 0xdd, 0x00, 0x22 ],
			[ 0xd9, 0x00, 0x26 ],
			[ 0xd5, 0x00, 0x2a ],
			[ 0xd1, 0x00, 0x2e ],
			[ 0xcc, 0x00, 0x33 ],
			[ 0xc8, 0x00, 0x37 ],
			[ 0xc4, 0x00, 0x3b ],
			[ 0xc0, 0x00, 0x3f ],
			[ 0xbb, 0x00, 0x44 ],
			[ 0xb7, 0x00, 0x48 ],
			[ 0xb3, 0x00, 0x4c ],
			[ 0xaf, 0x00, 0x50 ],
			[ 0xaa, 0x00, 0x55 ],
			[ 0xa6, 0x00, 0x59 ],
			[ 0xa2, 0x00, 0x5d ],
			[ 0x9e, 0x00, 0x61 ],
			[ 0x99, 0x00, 0x66 ],
			[ 0x95, 0x00, 0x6a ],
			[ 0x91, 0x00, 0x6e ],
			[ 0x8d, 0x00, 0x72 ],
			[ 0x88, 0x00, 0x77 ],
			[ 0x84, 0x00, 0x7b ],
			[ 0x80, 0x00, 0x7f ],
			[ 0x7c, 0x00, 0x83 ],
			[ 0x77, 0x00, 0x88 ],
			[ 0x73, 0x00, 0x8c ],
			[ 0x6f, 0x00, 0x90 ],
			[ 0x6b, 0x00, 0x94 ],
			[ 0x66, 0x00, 0x99 ],
			[ 0x62, 0x00, 0x9d ],
			[ 0x5e, 0x00, 0xa1 ],
			[ 0x5a, 0x00, 0xa5 ],
			[ 0x55, 0x00, 0xaa ],
			[ 0x51, 0x00, 0xae ],
			[ 0x4d, 0x00, 0xb2 ],
			[ 0x49, 0x00, 0xb6 ],
			[ 0x44, 0x00, 0xbb ],
			[ 0x40, 0x00, 0xbf ],
			[ 0x3c, 0x00, 0xc3 ],
			[ 0x38, 0x00, 0xc7 ],
			[ 0x33, 0x00, 0xcc ],
			[ 0x2f, 0x00, 0xd0 ],
			[ 0x2b, 0x00, 0xd4 ],
			[ 0x27, 0x00, 0xd8 ],
			[ 0x22, 0x00, 0xdd ],
			[ 0x1e, 0x00, 0xe1 ],
			[ 0x1a, 0x00, 0xe5 ],
			[ 0x16, 0x00, 0xe9 ],
			[ 0x11, 0x00, 0xee ],
			[ 0x0d, 0x00, 0xf2 ],
			[ 0x09, 0x00, 0xf6 ],
			[ 0x05, 0x00, 0xfa ],
			[ 0x00, 0x00, 0xff ],
			[ 0x04, 0x04, 0xfb ],
			[ 0x08, 0x08, 0xf7 ],
			[ 0x0c, 0x0c, 0xf3 ],
			[ 0x11, 0x11, 0xee ],
			[ 0x15, 0x15, 0xea ],
			[ 0x19, 0x19, 0xe6 ],
			[ 0x1d, 0x1d, 0xe2 ],
			[ 0x22, 0x22, 0xdd ],
			[ 0x26, 0x26, 0xd9 ],
			[ 0x2a, 0x2a, 0xd5 ],
			[ 0x2e, 0x2e, 0xd1 ],
			[ 0x33, 0x33, 0xcc ],
			[ 0x37, 0x37, 0xc8 ],
			[ 0x3b, 0x3b, 0xc4 ],
			[ 0x3f, 0x3f, 0xc0 ],
			[ 0x44, 0x44, 0xbb ],
			[ 0x48, 0x48, 0xb7 ],
			[ 0x4c, 0x4c, 0xb3 ],
			[ 0x50, 0x50, 0xaf ],
			[ 0x55, 0x55, 0xaa ],
			[ 0x59, 0x59, 0xa6 ],
			[ 0x5d, 0x5d, 0xa2 ],
			[ 0x61, 0x61, 0x9e ],
			[ 0x66, 0x66, 0x99 ],
			[ 0x6a, 0x6a, 0x95 ],
			[ 0x6e, 0x6e, 0x91 ],
			[ 0x72, 0x72, 0x8d ],
			[ 0x77, 0x77, 0x88 ],
			[ 0x7b, 0x7b, 0x84 ],
			[ 0x7f, 0x7f, 0x80 ],
			[ 0x83, 0x83, 0x7c ],
			[ 0x88, 0x88, 0x77 ],
			[ 0x8c, 0x8c, 0x73 ],
			[ 0x90, 0x90, 0x6f ],
			[ 0x94, 0x94, 0x6b ],
			[ 0x99, 0x99, 0x66 ],
			[ 0x9d, 0x9d, 0x62 ],
			[ 0xa1, 0xa1, 0x5e ],
			[ 0xa5, 0xa5, 0x5a ],
			[ 0xaa, 0xaa, 0x55 ],
			[ 0xae, 0xae, 0x51 ],
			[ 0xb2, 0xb2, 0x4d ],
			[ 0xb6, 0xb6, 0x49 ],
			[ 0xbb, 0xbb, 0x44 ],
			[ 0xbf, 0xbf, 0x40 ],
			[ 0xc3, 0xc3, 0x3c ],
			[ 0xc7, 0xc7, 0x38 ],
			[ 0xcc, 0xcc, 0x33 ],
			[ 0xd0, 0xd0, 0x2f ],
			[ 0xd4, 0xd4, 0x2b ],
			[ 0xd8, 0xd8, 0x27 ],
			[ 0xdd, 0xdd, 0x22 ],
			[ 0xe1, 0xe1, 0x1e ],
			[ 0xe5, 0xe5, 0x1a ],
			[ 0xe9, 0xe9, 0x16 ],
			[ 0xee, 0xee, 0x11 ],
			[ 0xf2, 0xf2, 0x0d ],
			[ 0xf6, 0xf6, 0x09 ],
			[ 0xfa, 0xfa, 0x05 ],
			[ 0xff, 0xff, 0x00 ],
			[ 0xfb, 0xff, 0x00 ],
			[ 0xf7, 0xff, 0x00 ],
			[ 0xf3, 0xff, 0x00 ],
			[ 0xee, 0xff, 0x00 ],
			[ 0xea, 0xff, 0x00 ],
			[ 0xe6, 0xff, 0x00 ],
			[ 0xe2, 0xff, 0x00 ],
			[ 0xdd, 0xff, 0x00 ],
			[ 0xd9, 0xff, 0x00 ],
			[ 0xd5, 0xff, 0x00 ],
			[ 0xd1, 0xff, 0x00 ],
			[ 0xcc, 0xff, 0x00 ],
			[ 0xc8, 0xff, 0x00 ],
			[ 0xc4, 0xff, 0x00 ],
			[ 0xc0, 0xff, 0x00 ],
			[ 0xbb, 0xff, 0x00 ],
			[ 0xb7, 0xff, 0x00 ],
			[ 0xb3, 0xff, 0x00 ],
			[ 0xaf, 0xff, 0x00 ],
			[ 0xaa, 0xff, 0x00 ],
			[ 0xa6, 0xff, 0x00 ],
			[ 0xa2, 0xff, 0x00 ],
			[ 0x9e, 0xff, 0x00 ],
			[ 0x99, 0xff, 0x00 ],
			[ 0x95, 0xff, 0x00 ],
			[ 0x91, 0xff, 0x00 ],
			[ 0x8d, 0xff, 0x00 ],
			[ 0x88, 0xff, 0x00 ],
			[ 0x84, 0xff, 0x00 ],
			[ 0x80, 0xff, 0x00 ],
			[ 0x7c, 0xff, 0x00 ],
			[ 0x77, 0xff, 0x00 ],
			[ 0x73, 0xff, 0x00 ],
			[ 0x6f, 0xff, 0x00 ],
			[ 0x6b, 0xff, 0x00 ],
			[ 0x66, 0xff, 0x00 ],
			[ 0x62, 0xff, 0x00 ],
			[ 0x5e, 0xff, 0x00 ],
			[ 0x5a, 0xff, 0x00 ],
			[ 0x55, 0xff, 0x00 ],
			[ 0x51, 0xff, 0x00 ],
			[ 0x4d, 0xff, 0x00 ],
			[ 0x49, 0xff, 0x00 ],
			[ 0x44, 0xff, 0x00 ],
			[ 0x40, 0xff, 0x00 ],
			[ 0x3c, 0xff, 0x00 ],
			[ 0x38, 0xff, 0x00 ],
			[ 0x33, 0xff, 0x00 ],
			[ 0x2f, 0xff, 0x00 ],
			[ 0x2b, 0xff, 0x00 ],
			[ 0x27, 0xff, 0x00 ],
			[ 0x22, 0xff, 0x00 ],
			[ 0x1e, 0xff, 0x00 ],
			[ 0x1a, 0xff, 0x00 ],
			[ 0x16, 0xff, 0x00 ],
			[ 0x11, 0xff, 0x00 ],
			[ 0x0d, 0xff, 0x00 ],
			[ 0x09, 0xff, 0x00 ],
			[ 0x05, 0xff, 0x00 ],	
			[ 0x00, 0xff, 0x00 ],
			[ 0x04, 0xfb, 0x00 ],
			[ 0x08, 0xf7, 0x00 ],
			[ 0x0c, 0xf3, 0x00 ],
			[ 0x11, 0xee, 0x00 ],
			[ 0x15, 0xea, 0x00 ],
			[ 0x19, 0xe6, 0x00 ],
			[ 0x1d, 0xe2, 0x00 ],
			[ 0x22, 0xdd, 0x00 ],
			[ 0x26, 0xd9, 0x00 ],
			[ 0x2a, 0xd5, 0x00 ],
			[ 0x2e, 0xd1, 0x00 ],
			[ 0x33, 0xcc, 0x00 ],
			[ 0x37, 0xc8, 0x00 ],
			[ 0x3b, 0xc4, 0x00 ],
			[ 0x3f, 0xc0, 0x00 ],
			[ 0x44, 0xbb, 0x00 ],
			[ 0x48, 0xb7, 0x00 ],
			[ 0x4c, 0xb3, 0x00 ],
			[ 0x50, 0xaf, 0x00 ],
			[ 0x55, 0xaa, 0x00 ],
			[ 0x59, 0xa6, 0x00 ],
			[ 0x5d, 0xa2, 0x00 ],
			[ 0x61, 0x9e, 0x00 ],
			[ 0x66, 0x99, 0x00 ],
			[ 0x6a, 0x95, 0x00 ],
			[ 0x6e, 0x91, 0x00 ],
			[ 0x72, 0x8d, 0x00 ],
			[ 0x77, 0x88, 0x00 ],
			[ 0x7b, 0x84, 0x00 ],
			[ 0x7f, 0x80, 0x00 ],
			[ 0x83, 0x7c, 0x00 ],
			[ 0x88, 0x77, 0x00 ],
			[ 0x8c, 0x73, 0x00 ],
			[ 0x90, 0x6f, 0x00 ],
			[ 0x94, 0x6b, 0x00 ],
			[ 0x99, 0x66, 0x00 ],
			[ 0x9d, 0x62, 0x00 ],
			[ 0xa1, 0x5e, 0x00 ],
			[ 0xa5, 0x5a, 0x00 ],
			[ 0xaa, 0x55, 0x00 ],
			[ 0xae, 0x51, 0x00 ],
			[ 0xb2, 0x4d, 0x00 ],
			[ 0xb6, 0x49, 0x00 ],
			[ 0xbb, 0x44, 0x00 ],
			[ 0xbf, 0x40, 0x00 ],
			[ 0xc3, 0x3c, 0x00 ],
			[ 0xc7, 0x38, 0x00 ],
			[ 0xcc, 0x33, 0x00 ],
			[ 0xd0, 0x2f, 0x00 ],
			[ 0xd4, 0x2b, 0x00 ],
			[ 0xd8, 0x27, 0x00 ],
			[ 0xdd, 0x22, 0x00 ],
			[ 0xe1, 0x1e, 0x00 ],
			[ 0xe5, 0x1a, 0x00 ],
			[ 0xe9, 0x16, 0x00 ],
			[ 0xee, 0x11, 0x00 ],
			[ 0xf2, 0x0d, 0x00 ],
			[ 0xf6, 0x09, 0x00 ],
			[ 0xfa, 0x05, 0x00 ]
		];

		// here we translate the rotation value (0 - 360) into a colour
		// Then send that along to the Holiday.  Too easy. 
		if (theApp.rotation == null) {
			var rgb = cca[0];
		} else {
			var rgb = cca[theApp.rotation];
		}
		console.log(rgb);
		currentLight.fastsetall(rgb[0], rgb[1], rgb[2]);
		currentLight.fastlights();
	}
	


}
